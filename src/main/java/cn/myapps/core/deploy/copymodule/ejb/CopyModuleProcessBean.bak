package cn.myapps.core.deploy.copymodule.ejb;

import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import cn.myapps.base.dao.DAOFactory;
import cn.myapps.base.dao.IDesignTimeDAO;
import cn.myapps.base.ejb.AbstractDesignTimeProcessBean;
import cn.myapps.core.counter.ejb.CounterProcess;
import cn.myapps.core.counter.ejb.CounterProcessBean;
import cn.myapps.core.deploy.application.ejb.ApplicationProcess;
import cn.myapps.core.deploy.application.ejb.ApplicationVO;
import cn.myapps.core.deploy.module.ejb.ModuleProcess;
import cn.myapps.core.deploy.module.ejb.ModuleVO;
import cn.myapps.core.dynaform.form.ejb.Form;
import cn.myapps.core.dynaform.form.ejb.FormProcess;
import cn.myapps.core.dynaform.view.ejb.View;
import cn.myapps.core.dynaform.view.ejb.ViewProcess;
import cn.myapps.core.resource.ejb.ResourceProcess;
import cn.myapps.core.resource.ejb.ResourceVO;
import cn.myapps.core.workflow.storage.definition.ejb.BillDefiProcess;
import cn.myapps.core.workflow.storage.definition.ejb.BillDefiVO;
import cn.myapps.util.ElementResplaceUtil;
import cn.myapps.util.ObjectUtil;
import cn.myapps.util.ProcessFactory;
import cn.myapps.util.StringUtil;
import cn.myapps.util.sequence.Sequence;

public class CopyModuleProcessBean extends AbstractDesignTimeProcessBean
		implements CopyModuleProcess {

	public CopyModuleProcessBean() throws Exception {
		setProcess();
	}

	private ApplicationProcess applicationProcess;

	ModuleProcess moduleProcess;

	FormProcess formProcess;

	ViewProcess viewProcess;

	BillDefiProcess billDefiProcess;

	private ResourceProcess resourceProcess;

	private CounterProcess countProcess;

	private HashMap  formMap;

	private HashMap  viewMap;

	private HashMap  flowMap;

	HashMap  moduleMap;

	public void setProcess() throws Exception {
		moduleProcess = (ModuleProcess) ProcessFactory
				.createProcess(ModuleProcess.class);
		formProcess = (FormProcess) ProcessFactory
				.createProcess(FormProcess.class);
		viewProcess = (ViewProcess) ProcessFactory
				.createProcess(ViewProcess.class);
		billDefiProcess = (BillDefiProcess) ProcessFactory
				.createProcess(BillDefiProcess.class);
		applicationProcess = (ApplicationProcess) ProcessFactory
				.createProcess(ApplicationProcess.class);
		resourceProcess = (ResourceProcess) ProcessFactory
				.createProcess(ResourceProcess.class);

	}

	public CounterProcess getCountProcess(String application) throws Exception {
		return new CounterProcessBean(application);
	}

	protected IDesignTimeDAO getDAO() throws Exception {
		return DAOFactory.getDefaultDAO(CopyModuleVO.class.getName());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * cn.myapps.core.copymodule.ejb.CopyModuleProcess#CopyForm(cn.myapps.core
	 * .copymodule.ejb.CopyModuleVO, java.lang.String,
	 * cn.myapps.base.dao.ValueObject)
	 */
	public Form copyForm(CopyModuleVO vo, String moduleId, String oldFormId,
			String newFormid) throws Exception {
		Form form = new Form();
		ModuleVO module = getModuleById(moduleId);
		ModuleVO newmodule = getModuleById(vo.getModuleId());
		Collection formList = formProcess.getFormsByModule(moduleId, vo
				.getApplicationid());
		if (formList != null && formList.size() > 0) {
			for (Iterator iterator = formList.iterator(); iterator.hasNext();) {
				Form formVo = (Form) iterator.next();
				if (oldFormId != null) {
					Form newForm = (Form) formProcess.doView(oldFormId);
					if (formVo.equals(newForm)) {
						form.setApplicationid(vo.getApplicationid());
						form.setId(newFormid);
						if (newmodule == null) {
							form.setModule(module);
						} else {
							form.setModule(newmodule);
						}
						form.setActivitys(formVo.getActivitys());
						form.setActivityXML(formVo.getActivityXML());
						int count = getCount(formVo.getName(), form
								.getApplicationid(), form.getDomainid());
						String name = "copy" + count;
						form.setName(name + formVo.getName());
						form.setDomainid(formVo.getDomainid());
						form.setLastmodifier(formVo.getLastmodifier());
						form.setTemplatecontext(formVo.getTemplatecontext());
						form.setShowLog(formVo.isShowLog());
						form.setType(formVo.getType());
						form.setStyle(formVo.getStyle());
						form.setVersion(formVo.getVersion());
						formProcess.doCreate(form);
					}
				}
			}
		}
		return form;
	}

	public ModuleVO copyModule(CopyModuleVO vo, String oldModuleId,
			String newModuldeId, String superior) throws Exception {
		ModuleVO modulevo = new ModuleVO();
		ModuleVO moduleCo = getModuleById(oldModuleId);
		ApplicationVO appvo = (ApplicationVO) applicationProcess.doView(vo
				.getApplicationid());
		if (vo.getModuleId() != null) {
			modulevo.setId(newModuldeId);
			modulevo.setApplicationid(moduleCo.getApplicationid());
			modulevo.setApplication(moduleCo.getApplication());
			if (vo.getModulename() != null) {
				modulevo.setName(vo.getModulename());
			} else {
				int count = getCount(modulevo.getName(), modulevo
						.getApplicationid(), modulevo.getDomainid());
				String name = "copy" + count;
				modulevo.setName(name + moduleCo.getName());
			}
			if (vo.getDescription() != null) {
				modulevo.setDescription(vo.getDescription());
			} else {
				modulevo.setDescription(moduleCo.getDescription());
			}
			ModuleVO superiorId = (ModuleVO) moduleProcess.doView(superior);
			modulevo.setSuperior(superiorId);
			modulevo.setSortId(moduleCo.getSortId());
			modulevo.setInuredate(new Date());
			moduleProcess.doCreate(modulevo);
		}
		return modulevo;
	}

	/**
	 * select moduleId
	 * 
	 * @param pk
	 * @return
	 * @throws Exception
	 */
	public ModuleVO getModuleById(String pk) throws Exception {
		return (ModuleVO) moduleProcess.doView(pk);
	}

	/**
	 * 复制模块(包括模块所有子元素)
	 * 
	 * @param moduleId
	 *            旧模块ID
	 * @param newModuleId
	 *            新模块ID
	 * @param superiorId
	 *            上级模块ID
	 * @return 复制后的模块
	 * @throws Exception
	 */
	public ModuleVO copyModuleALL(String moduleId, String newModuleId,
			String superiorId) throws Exception {
		moduleMap = new HashMap();
		if (!StringUtil.isBlank(moduleId)) {
			ModuleVO copiedModule = (ModuleVO) moduleProcess.doView(moduleId);
			if (copiedModule != null) {
				ModuleVO vo = new ModuleVO();
				if (StringUtil.isBlank(newModuleId)) {
					newModuleId = Sequence.getSequence();
				}
				vo.setId(newModuleId);
				moduleMap.put(copiedModule.getId(), vo.getId());
				vo.setApplication(copiedModule.getApplication());
				vo.setCommitDate(copiedModule.getCommitDate());
				vo.setDescription(copiedModule.getDescription());
				vo.setLastmodifytime(copiedModule.getLastmodifytime());
				vo.setInuredate(new Date());
				vo.setSortId(copiedModule.getSortId());
				vo.setApplicationid(copiedModule.getApplicationid());
				ModuleVO superior = (ModuleVO) moduleProcess.doView(superiorId);
				if (superior != null) {
					vo.setSuperior(superior);
				} else {
					vo.setSuperior(copiedModule.getSuperior());
				}
				int count = getCount(copiedModule.getName(), copiedModule
						.getApplicationid(), copiedModule.getDomainid());
				String name = "copy" + count;
				vo.setName(copiedModule.getName() + name);
				moduleProcess.doCreate(vo);
				CopyAllThread copyThread = new CopyAllThread(copiedModule, vo,
						superiorId);
				new Thread(copyThread).start();

				return vo;
			}

		}
		return null;
	}

	public ModuleVO copyModuleALL(String moduleId, String superiorId)
			throws Exception {
		return copyModuleALL(moduleId, null, superiorId);
	}

	public ModuleVO copyModuleALL(String moduleid) throws Exception {
		return copyModuleALL(moduleid, null);
	}

	public void replaceAll(String moduleid, String application)
			throws Exception {
		this.replaceForm(formMap, viewMap, flowMap, moduleMap, application);
		this.replaceView(formMap, viewMap, application);
	}

	/**
	 * 复制本模块下的表单
	 * 
	 * @param formList
	 * @param vo
	 * @throws Exception
	 */
	public void copyAllForm(Collection formList, ModuleVO vo) throws Exception {
		formMap = new HashMap();
		if (formList != null && formList.size() > 0) {
			for (Iterator iterator2 = formList.iterator(); iterator2.hasNext();) {
				Form form = (Form) iterator2.next();
				Form form_v = new Form();
				form_v.setModule(vo);
				String formid = Sequence.getSequence();
				form_v.setId(formid);
				formMap.put(form.getId(), formid);
				form_v.setActivityXML(form.getActivityXML());
				int count = getCount(form.getName(), form.getApplicationid(),
						form.getDomainid());
				String name = "copy" + count;
				form_v.setName(form.getName() + "_" + name);
				form_v.setDomainid(form.getDomainid());
				form_v.setLastmodifier(form.getLastmodifier());
				form_v.setTemplatecontext(form.getTemplatecontext());
				form_v.setShowLog(form.isShowLog());
				form_v.setType(form.getType());
				form_v.setStyle(form.getStyle());
				form_v.setVersion(form.getVersion());
				form_v.setApplicationid(form.getApplicationid());
				formProcess.doCreate(form_v);
			}
		}
	}

	/**
	 * 复制本模块下的视图
	 * 
	 * @param viewList
	 * @param vo
	 * @throws Exception
	 */
	public void copyAllView(Collection viewList, ModuleVO vo) throws Exception {
		viewMap = new HashMap();
		if (viewList != null && viewList.size() > 0) {
			// 顶级resource
			ResourceVO reSuperior = createRsourceByModule(vo);
			for (Iterator iterator2 = viewList.iterator(); iterator2.hasNext();) {
				View view = (View) iterator2.next();
				View view_v = new View();
				ObjectUtil.copyProperties(view_v, view);
				int count = getCount(view.getName(), view.getApplicationid(),
						view.getDomainid());
				String name = "copy" + count;
				view_v.setName(view.getName() + "_" + name);
				String viewid = Sequence.getSequence();
				view_v.setId(viewid);
				viewMap.put(view.getId(), view_v.getId());
				view_v.setModule(vo);
				// 替换view对应的resource
				ResourceVO resourcevo = copyResource(view_v, reSuperior);
				if (resourcevo != null) {
					view_v.setRelatedResourceid(resourcevo.getId());
				}
				viewProcess.doCreate(view_v);
			}
		}
	}

	public void copyAllFlow(Collection flowList, ModuleVO vo) throws Exception {
		flowMap = new HashMap();
		if (flowList != null && flowList.size() > 0) {
			for (Iterator iterator2 = flowList.iterator(); iterator2.hasNext();) {
				BillDefiVO billDefiVO = (BillDefiVO) iterator2.next();
				BillDefiVO bill = new BillDefiVO();
				ObjectUtil.copyProperties(bill, billDefiVO);
				String flowid = Sequence.getSequence();
				bill.setId(flowid);
				bill.setModule(vo);
				int count = getCount(bill.getSubject(),
						bill.getApplicationid(), bill.getDomainid());
				String name = "copy" + count;
				bill.setSubject(billDefiVO.getSubject() + "_" + name);
				billDefiProcess.doCreate(bill);
				flowMap.put(billDefiVO.getId(), flowid);
			}
		}
	}

	public View copyView(CopyModuleVO vo, String moduleId, String oldViewId,
			String newViewid) throws Exception {
		Collection viewList = null;
		View view = new View();
		if (vo != null && moduleId != null) {
			ModuleVO module = getModuleById(moduleId);
			ModuleVO newmodule = getModuleById(vo.getModuleId());
			viewList = viewProcess.getViewsByModule(moduleId, vo
					.getApplicationid());
			for (Iterator iterator = viewList.iterator(); iterator.hasNext();) {
				View viewVO = (View) iterator.next();
				View newView = (View) viewProcess.doView(oldViewId);
				if (newView.equals(viewVO)) {
					ObjectUtil.copyProperties(view, viewVO);
					view.setId(newViewid);
					view.setApplicationid(viewVO.getApplicationid());
					// 设置子元素(Activity)
					view.setActivityXML(viewVO.getActivityXML());
					// 设置子元素(Column)
					view.setColumnXML(viewVO.getColumnXML());

					int count = getCount(view.getName(), view
							.getApplicationid(), view.getDomainid());
					String name = "copy" + count;
					view.setName(viewVO.getName() + name);

					ResourceVO reSuperior = createRsourceByModule(view
							.getModule());
					ResourceVO resvo = copyResource(view, reSuperior);
					view.setSearchForm(viewVO.getSearchForm());
					if (resvo != null) {
						view.setRelatedResourceid(resvo.getId());
					}
					view.setDescription(viewVO.getDescription());
					if (newmodule != null) {
						view.setModule(newmodule);
					} else {
						view.setModule(module);
					}
					viewProcess.doCreate(view);
				}
			}
		}
		return view;
	}

	public BillDefiVO copyFlow(CopyModuleVO vo, String moduleId, String flowId,
			String _flowid) throws Exception {
		Collection BillDefiVOList = null;
		BillDefiVO bill = new BillDefiVO();
		if (vo != null && moduleId != null) {
			BillDefiVOList = billDefiProcess.getBillDefiByModule(moduleId);
			ModuleVO newmodule = getModuleById(vo.getModuleId());
			ModuleVO module = getModuleById(moduleId);
			BillDefiVO newBillDefiVO = (BillDefiVO) billDefiProcess
					.doView(flowId);
			for (Iterator iterator = BillDefiVOList.iterator(); iterator
					.hasNext();) {
				BillDefiVO billDefiVO = (BillDefiVO) iterator.next();
				if (billDefiVO.equals(newBillDefiVO)) {
					ObjectUtil.copyProperties(bill, newBillDefiVO);
					bill.setId(_flowid);
					bill.setApplicationid(newBillDefiVO.getApplicationid());
					bill.setFlow(billDefiVO.getFlow());
					if (newmodule == null) {
						bill.setModule(module);
					} else {
						bill.setModule(newmodule);
					}
					int count = getCount(bill.getSubject(), bill
							.getApplicationid(), bill.getDomainid());
					String name = "copy" + count;
					bill.setSubject(name + newBillDefiVO.getSubject());
					viewProcess.doCreate(bill);
				}
			}
		}
		return bill;
	}

	/**
	 * 复制菜单
	 * 
	 * @param view
	 * @throws Exception
	 */
	public ResourceVO copyResource(View view, ResourceVO superior)
			throws Exception {
		try {
			if (!StringUtil.isBlank(view.getRelatedResourceid())) {
				ResourceVO resourcevo = (ResourceVO) resourceProcess
						.doView(view.getRelatedResourceid());
				if (resourcevo != null) {
					ResourceVO resvo = new ResourceVO();
					ObjectUtil.copyProperties(resvo, resourcevo);
					resvo.setActionurl(resourcevo.getActionurl());
					resvo.setApplication(resourcevo.getApplication());
					resvo.setDisplayView(resourcevo.getDisplayView());
					resvo.setDomainid(resourcevo.getDomainid());
					resvo.setSuperior(superior);
					resvo.setModule(view.getModule().getId());
					resvo.setDisplayView(view.getId());
					String resourceid = Sequence.getSequence();
					resvo.setId(resourceid);
					resvo.setRelatedPermissions(new HashSet());
					int count = getCount(resvo.getDescription(), resvo
							.getApplicationid(), resvo.getDomainid());
					String name = "copy" + count;
					resvo.setDescription(resourcevo.getDescription());
					// resvo.setDescription(resourcevo.getDescription() + "_" +
					// name);
					resourceProcess.doCreate(resvo);
					return resvo;
				}
			}
		} catch (Exception e) {
			throw e;
		}
		return null;

	}

	/**
	 * 获得count的下一个数字
	 * 
	 * @param name
	 *            TODO
	 * @param applicationid
	 * @param domainid
	 * 
	 * @return
	 * @throws Exception
	 */
	public int getCount(String name, String applicationid, String domainid)
			throws Exception {
		return getCountProcess(applicationid).getNextValue(name, applicationid,
				domainid);
	}

	public void replaceForm(Map formMap, Map viewMap, Map flowMap,
			Map moduleMap, String application) throws Exception {
		if (formMap != null) {
			for (Iterator iterator = formMap.entrySet().iterator(); iterator
					.hasNext();) {
				Map.Entry  entry = (Entry ) iterator
						.next();
				String formKey = entry.getKey();
				String formValue = entry.getValue();
				Form form = (Form) formProcess.doView(formValue);
				if (form != null) {
					String resplaceTemplate = form.getTemplatecontext();
					if (!StringUtil.isBlank(resplaceTemplate)) {
						// 替换form中的需要的view属性
						for (Iterator iter = viewMap.entrySet().iterator(); iter
								.hasNext();) {
							if (iter != null) {
								Map.Entry  viewEntry = (Entry ) iter
										.next();
								String viewKey = viewEntry.getKey();
								String viewValue = viewEntry.getValue();
								if (viewKey != null && viewValue != null) {
									resplaceTemplate = resplaceTemplate
											.replaceAll(viewKey, viewValue);
								}
							}
						}
						// 替换module
						for (Iterator iterator2 = moduleMap.entrySet()
								.iterator(); iterator2.hasNext();) {
							Map.Entry  moduleEntry = (Map.Entry ) iterator2
									.next();
							String moduleKey = moduleEntry.getKey();
							String moduleValue = moduleEntry.getValue();
							resplaceTemplate = resplaceTemplate.replaceAll(
									moduleKey, moduleValue);
						}
						form.setTemplatecontext(resplaceTemplate);
					}

					String activity = form.getActivityXML();
					if (!StringUtil.isBlank(activity)) {
						for (Iterator flowiter = flowMap.entrySet().iterator(); flowiter
								.hasNext();) {
							Map.Entry  viewEntry = (Entry ) flowiter
									.next();
							String flowKey = viewEntry.getKey();
							String flowValue = viewEntry.getValue();
							if (flowKey != null && flowValue != null) {
								activity = activity.replaceAll(flowKey,
										flowValue);
							}

						}
						form.setActivityXML(activity);
					}
					formProcess.doUpdate(form);
				}
			}

		}

	}

	public void replaceView(Map formMap, Map viewMap, String application)
			throws Exception {
		for (Iterator iterator = viewMap.entrySet().iterator(); iterator
				.hasNext();) {
			Map.Entry  entry = (Entry ) iterator
					.next();
			String viewKey = entry.getKey();
			String viewValue = entry.getValue();
			View view = (View) viewProcess.doView(viewValue);
			View oldview = (View) viewProcess.doView(viewKey);
			if (view != null) {
				String activityXML = view.getActivityXML();
				String columnXML = view.getColumnXML();
				String filterScript = view.getFilterScript();
				Form searchForm = null;
				for (Iterator iter = formMap.entrySet().iterator(); iter
						.hasNext();) {
					Map.Entry  formEntry = (Entry ) iter
							.next();
					String formKey = formEntry.getKey();
					String formValue = formEntry.getValue();

					// 替换TAB Field所对应的表单

					updateFormTabMenu(formMap, formValue);
					if (view.getActivityXML() != null) {
						activityXML = activityXML
								.replaceAll(formKey, formValue);
					}
					if (view.getColumnXML() != null) {
						columnXML = columnXML.replaceAll(formKey, formValue);
					}
					if (filterScript != null) {
						filterScript = getFilterScript(filterScript, formKey,
								formValue);
					}
					searchForm = getSearchForm(formKey, formValue);
				}
				String resourceId = view.getRelatedResourceid();
				view.setActivitys(null);
				view.setActivityXML(activityXML);
				view.setColumns(null);
				view.setColumnXML(columnXML);
				view.setFilterScript(filterScript);
				view.setSearchForm(searchForm);
				viewProcess.doUpdate(view);
			}
		}
	}

	/**
	 * 取得表单名
	 * 
	 * @param filterScript
	 * @param key
	 * @param value
	 * @return
	 * @throws Exception
	 */
	public String getFormName(String filterScript, String formKey,
			String formValue) throws Exception {
		if (formKey != null && formValue != null) {
			Form oldForm = (Form) formProcess.doView(formKey);
			Form newForm = (Form) formProcess.doView(formValue);
			if (oldForm.getName() != null && newForm.getName() != null
					&& filterScript != null) {
				return filterScript.replaceAll(oldForm.getFullName(), newForm
						.getFullName());
			}
		}
		return null;
	}

	/**
	 * map 中的key和value查找SearchForm
	 * 
	 * @param key
	 * @param value
	 * @return
	 * @throws Exception
	 */
	public Form getSearchForm(String formKey, String formValue)
			throws Exception {
		if (formKey != null && formValue != null) {
			Form oldForm = (Form) formProcess.doView(formKey);
			Form newForm = (Form) formProcess.doView(formValue);
			if (newForm != null) {
				return newForm.getType() == 256 ? newForm : null;
			}
		}
		return null;
	}

	/**
	 * 当表单的类型为tab menu的时候需要再次update本个form
	 * 
	 * @param map
	 * @param formId
	 */
	public void updateFormTabMenu(Map map, String formId) throws Exception {
		Form form = (Form) formProcess.doView(formId);
		String template = form.getTemplatecontext();
		for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {
			Map.Entry  resourceEntry = (Entry ) iterator
					.next();
			String formIdKey = resourceEntry.getKey();
			String formIdValue = resourceEntry.getValue();
			if (form.getTemplatecontext() != null) {
				template = template.replaceAll(formIdKey, formIdValue);
			}
		}
		form.setTemplatecontext(template);
		formProcess.doUpdate(form);
	}

	/**
	 * 替换module的名
	 * 
	 * @param Map
	 *            viewMap
	 * @param filterscript
	 * @param key
	 * @param value
	 * @return
	 * @throws Exception
	 */
	public String getFilterScript(String filterscript, String key, String value)
			throws Exception {
		Form oldForm = (Form) formProcess.doView(key);
		Form newForm = (Form) formProcess.doView(value);
		if (oldForm != null && newForm != null && filterscript != null) {
			return replaceFormName(oldForm, newForm, filterscript);
		}
		return filterscript;
	}

	public String replaceFormName(Form oldForm, Form newForm,
			String filterscript) {
		int index = filterscript.toLowerCase().indexOf("$formname");
		if (index != -1) {
			String formname = filterscript.substring(index);
			if ((index = formname.indexOf("=")) != -1) {
				formname = formname.substring(index + 1);
				formname = formname.substring(0, formname.lastIndexOf("\""));
				formname = formname.replaceAll("\\(", "");
				formname = formname.replaceAll("\\)", "");
				formname = formname.replaceAll("\\'", "");
				if ((index = formname.toLowerCase().indexOf(" and")) != -1)
					formname = formname.substring(0, index);

				formname = formname.trim();
				String temp = formname;
				if ((index = formname.lastIndexOf("/")) != -1)
					temp = formname.substring(index + 1);
				if (temp.equals(oldForm.getName())) {
					return filterscript.replaceAll(formname, newForm
							.getFullName());
				}
			}
		}
		return filterscript;
	}

	// create top resource
	public ResourceVO createRsourceByModule(ModuleVO module) throws Exception {
		ResourceVO rs = new ResourceVO();
		rs.setId(Sequence.getSequence());
		rs.setDescription(module.getName());
		rs.setApplication(module.getApplicationid());
		rs.setApplicationid(module.getApplicationid());
		rs.setResourceAction(ResourceVO.ACTIONTYPE_NONE);
		rs.setIsview(ResourceVO.ACCESS_CONTRAL_PRIVATE); // 默认为私有
		rs.setType("00");
		rs.setIsprotected(false);
		rs.setIsview("private");
		resourceProcess.doCreate(rs);
		return rs;
	}

	class CopyAllThread implements Runnable {
		String superiorId;

		ModuleVO oldModule;// old module

		ModuleVO newModule;// new module

		public CopyAllThread(ModuleVO oldModule, ModuleVO newModule,
				String superiorId) {
			this.superiorId = superiorId;
			this.oldModule = oldModule;
			this.newModule = newModule;
		}

		public void run() {
			try {
				if (oldModule != null && newModule != null) {
					// 复制Form
					Collection formList = formProcess.getFormsByModule(
							oldModule.getId(), oldModule.getApplicationid());
					copyAllForm(formList, newModule);
					// 复制view
					Collection viewList = viewProcess.getViewsByModule(
							oldModule.getId(), oldModule.getApplicationid());
					copyAllView(viewList, newModule);
					// 复制流程
					Collection flowList = billDefiProcess
							.getBillDefiByModule(oldModule.getId());
					copyAllFlow(flowList, newModule);
					replaceAll(newModule.getId(), oldModule.getApplicationid());
				}
			} catch (Exception e) {
				e.printStackTrace();
				try {
					moduleProcess.deleteModule(newModule.getId(), newModule
							.getApplicationid());
				} catch (Exception e1) {
					e1.printStackTrace();
				} finally {
					Thread.interrupted(); // 中断线程
				}
			}
		}
	}
}
